- **Modular Template Extensions**: Allow custom template overrides per novel via additional directories. Benefit: Easier customization for multi-novel sites. Implementation: Enhance template loading in `generate.py` to check novel-specific folders.

- **Error Handling and Validation**: Add build-time validation for config/front matter (e.g., required fields, duplicate IDs). Benefit: Prevents broken builds. Implementation: YAML schema checks in `generate.py`.

- **Improved Accessibility**: Add ARIA labels to navigation, ensure keyboard-focusable elements, and enforce alt text for all images (with build-time warnings for missing ones). Benefit: Complies with WCAG standards, widening audience. Implementation: Update templates with ARIA attributes; add checks in `generate.py` for image alt text.


5. --serve - Local server with live reload via websocket
  6. --watch - File watching with auto-rebuild (no server)
  7. --optimize-images - Convert images to WebP with configurable compression


1. --novel [novel-name]

  python generate.py --novel my-awesome-web-novel
  - Purpose: Generate only a specific novel instead of all novels
  - Use case: Faster builds when working on a single novel in a multi-novel repository
  - Benefits: Saves time during development and testing

  2. --clean

  python generate.py --clean
  - Purpose: Delete the build directory before generating
  - Use case: Ensure a completely fresh build without leftover files
  - Benefits: Prevents orphaned files from deleted chapters/images

  3. --watch

  python generate.py --watch
  - Purpose: Watch for file changes and auto-regenerate
  - Use case: Live development with automatic rebuilds
  - Benefits: Improved developer experience

  4. --serve [port]

  python generate.py --serve 8000
  - Purpose: Start a local web server after building
  - Use case: Immediately preview the site without manual server setup
  - Benefits: One-command build and preview

  5. --no-epub

  python generate.py --no-epub
  - Purpose: Skip EPUB generation
  - Use case: Faster builds when not testing EPUB functionality
  - Benefits: Significantly faster build times

  6. --validate

  python generate.py --validate
  - Purpose: Validate all config files and content without building
  - Use case: Pre-flight check before deployment
  - Benefits: Catch YAML errors, missing required fields, invalid front matter

  7. --language [lang-code]

  python generate.py --language jp
  - Purpose: Generate only specific language versions
  - Use case: Testing translations or language-specific builds
  - Benefits: Faster builds for translators

  8. --verbose / -v

  python generate.py --verbose
  - Purpose: Show detailed progress and debugging information
  - Use case: Troubleshooting build issues
  - Benefits: Better visibility into what's happening

  9. --quiet / -q

  python generate.py --quiet
  - Purpose: Minimal output (errors only)
  - Use case: CI/CD pipelines, automated builds
  - Benefits: Cleaner logs in automated environments

  10. --stats

  python generate.py --stats
  - Purpose: Generate detailed statistics report after build
  - Use case: Track content growth, translation progress
  - Benefits: Could show:
    - Total chapters per novel
    - Word/character counts
    - Translation completion percentages
    - Tag usage statistics
    - Image count and sizes

  11. --optimize-images

  python generate.py --optimize-images
  - Purpose: Compress and optimize images during build
  - Use case: Reduce site size for faster loading
  - Benefits: Better performance, lower bandwidth usage

  12. --deploy [target]

  python generate.py --deploy github-pages
  python generate.py --deploy netlify
  - Purpose: Deploy to specific platforms after building
  - Use case: One-command build and deploy
  - Benefits: Simplified deployment workflow